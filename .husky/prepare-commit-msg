#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

npx --no -- commitlint --edit ${1}

# git prepare-commit-msg hook for emojified commit message prefix
# source: https://gist.github.com/negokaz/27a39274061a728ebd09f847ea4e93b4

readonly COMMIT_MSG_FILE=$1
readonly COMMIT_SOURCE=$2
readonly SHA1=$3

to_emoji () {
  echo $1 | perl -CO -pE 's/\\u(\p{Hex}+)/chr(hex($1))/xieg'
}

readonly emoji_merge="$(to_emoji     '\U1f500')"

create_full_template() {
  local msg_temp_file="$(mktemp)"
  {
    echo "# Overview (Uncomment one of the following templates)"
    echo "#feat: "
    echo "#  └ A new feature"
    echo "#fix: "
    echo "#  └ A bug fix"
    echo "#docs: "
    echo "#  └ Documentation only changes"
    echo "#style: "
    echo "#  └ Changes that do not affect the meaning of the code"
    echo "#    (white-space, formatting, missing semi-colons, etc)"
    echo "#refactor: "
    echo "#  └ A code change that neither fixes a bug nor adds a feature"
    echo "#perf: "
    echo "#  └ A code change that improves performance"
    echo "#test: "
    echo "#  └ Adding missing or correcting existing tests"
    echo "#chore: "
    echo "#  └ Changes to the build process or auxiliary tools and libraries "
    echo "#    such as documentation generation"
    echo "#build: "
    echo "#  └ Changes that affect the build system or external dependencies"
    echo "#    (example scopes: gulp, broccoli, npm)"
    echo "#ci: "
    echo "#  └ Changes to our CI configuration files and scripts"
    echo "#   (example scopes: Travis, Circle, BrowserStack, SauceLabs)"
    echo ""
    echo "# Details"
    echo ""
    cat "${COMMIT_MSG_FILE}"
  } > "${msg_temp_file}"

  cat "${msg_temp_file}" > "${COMMIT_MSG_FILE}"
  rm  "${msg_temp_file}"
}

insert_emoji () {
  sed "s/^$1.*: /&"$(to_emoji $2)" /" $COMMIT_MSG_FILE
}

add_emoji_by_message_prefix() {
  local msg_temp_file="$(mktemp)"

  {
    if grep --silent '^feat' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "feat" "\U2B50"
    elif grep --silent '^fix' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "fix" "\U1f41e"
    elif grep --silent '^docs' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "docs" "\U1f4da"
    elif grep --silent '^style' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "style" "\U1F308"
    elif grep --silent '^refactor' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "refactor" "\U2728"
    elif grep --silent '^perf' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "perf" "\U1f680"
    elif grep --silent '^test' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "test" "\U2705"
    elif grep --silent '^build' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "build" "\U1F4E6"
    elif grep --silent '^ci' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "ci" "\U1F6E0"
    elif grep --silent '^chore' "${COMMIT_MSG_FILE}"; then
      echo "" | insert_emoji "chore" "\U1f477"
    else
      cat "${COMMIT_MSG_FILE}"
    fi
  } > "${msg_temp_file}"

  cat "${msg_temp_file}" > "${COMMIT_MSG_FILE}"
  rm  "${msg_temp_file}"
}

add_merge_emoji() {
  local msg_temp_file="$(mktemp)"
  echo "${emoji_merge}$(cat ${COMMIT_MSG_FILE})" > "${msg_temp_file}"
  cat "${msg_temp_file}" > "${COMMIT_MSG_FILE}"
  rm  "${msg_temp_file}"
}

case "${COMMIT_SOURCE}" in
  message) # use -m/-F
    add_emoji_by_message_prefix
  ;;
  template) # use template (ex: -t option)
    : # do nothing
  ;;
  merge) # merge commit
    add_merge_emoji
  ;;
  squash) # squash commits in a branch with --squash
    : # do nothing
  ;;
  commit) # use -c/-C/--amend
    : # do nothing
  ;;
  *) # no option
    create_full_template
  ;;
esac

